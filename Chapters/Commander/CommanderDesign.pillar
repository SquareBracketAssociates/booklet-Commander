!! For framework designers

The design of Commander favors strong extensibility while keeping its use simple. The extensibility is brought in by using a simple decorator pattern.
The idea is to propose a simple API to users while giving the possibility to modularly extend the framework.
In this chapter, we explain the key aspects of Commander so that developers of other frameworks can use it as the root of their
solution. 
We show the integration of Commander and Spec as a concrete use case.

+Full design.>figures/FirstDecorator.pdf|width=90|label=decorator+

!!! Decorating commands

By default a command does not know about Spec specific behavior. 
It can be used in other contexts such as scripting libraries as this was the case with Gofer (Gofer was a scripting API to script monticello).
Another example is that the core behavior of PharoLauncher will be exposed as Clap command-line using the fact that PharoLauncher propose commands.

The Spec project extends Commander so that we can extend commands with specific 
aspects related to Spec. It uses the fact that Commander allows us to decorate commands with decoration that are polymorphic to commands. 

The class ==CmUICommand== is a decorator of command dedicated for UI related state and actions. 
As we saw in previous chapters
- State: icon, shortcutKey
- Behavior: defining icon, and shorcutKey

==asSpecCommand==

The method ==asSpecCommand== decorates a command to define extra behavior responsible for the addition 
of ui related functionality and state. 

The implementation is the following one
(check new implementation)
[[[
CmUICommand >> asSpecCommand
	"Subclasses might override this method to define default icon and shortcut."
	^ self decorateWith: SpUICommand
]]]


!!! Decorating group of commands


asToolbarPresenter

[[[
asToolbarPresenter
	^ SpToolBarPresenterBuilder new
		visit: self;
		toolbarPresenter

]]]


!!! Example of Visitor: toolbarBuilder

[[[
visitCommand: aCmCommandEntry
	aCmCommandEntry positionStrategy
		addButton: (SpToolBarButton new
						label: aCmCommandEntry name;
						help: aCmCommandEntry description;
						icon: aCmCommandEntry icon;
						action: [ aCmCommandEntry execute ];
						yourself)
		toToolbar: self toolbarPresenter
]]]


!!! Full design view

+Full design.>figures/DesignAdvanced.pdf|width=90|label=advanced+